DB::table('user')->get();
	DB::table('user')->select('name','email','username','password')->first();	
	DB::table('user')->select('name','email')->get();
	DB::table('user')->find(4);

	DB::table('user')->count('name');
	DB::table('user')->max('price');

	DB::table('user')->select("name","email","username")->where('active',1)->get();
	DB::table('user')->distinct()->get();

	DB::table('user')
			->select(db::raw('count(*) as no_of_row','name','email'))
			->where('status','=',1)
		->get();


$catalogueList = DB::table($catalogueTable)->where('isActive', 1)
                                            ->select('ID','productID','variantID',DB::raw('CONCAT(productID, "-", variantID) AS concatProdVart'))
                                            ->get();
					    
 $storeDetail = convertToArray(DB::table($listOfStoresTable)
								->where("chainID", $chainID)
								->select("storeID", "storeName")
								->whereDate("startDateLocal", ">=", $fromDate)
								->whereDate("startDateLocal", "<=", $toDate)
								->where('isActive', 1)
					       ->get());




        $resellerID = $dataArray['resellerID'];
        $city = '%'; $state = '%'; $country = '%'; $chainID = '%'; $storeID = '%'; $status = '%';

		if(isset($dataArray['city'])){
        	($dataArray['city'] == "ALL") ? $city = '%' : $city = $dataArray['city'];
        }
        if(isset($dataArray['state'])){
        	($dataArray['state'] == "ALL") ? $state = '%' : $state = $dataArray['state'];
        }
        if(isset($dataArray['country'])){
        	($dataArray['country'] == "ALL") ? $country = '%' : $country = $dataArray['country'];
        }
        if(isset($dataArray['chainID'])){
        	($dataArray['chainID'] == "ALL") ? $chainID = '%' : $chainID = $dataArray['chainID'];
        }
        if(isset($dataArray['storeID'])){
        	($dataArray['storeID'] == "ALL") ? $storeID = '%' : $storeID = $dataArray['storeID'];
        }
        if(isset($dataArray['status'])){
        	($dataArray['status'] == "ALL") ? $status = '%' : $status = $dataArray['status'];
        }

        $data = DB::table($globalPartnerDeviceOwnership)
									->leftjoin($globalDeviceMgmt,"$globalDeviceMgmt.licenseNumber","=","$globalPartnerDeviceOwnership.licenseNumber")
									->leftjoin($listOfStores,"$globalDeviceMgmt.storeID","=","$listOfStores.storeID")
									->leftjoin($listOfChains,"$globalDeviceMgmt.chainID","=","$listOfChains.chainID")
									->select("$globalPartnerDeviceOwnership.*","$listOfChains.chainID","$listOfChains.companyName","$listOfStores.storeID","$listOfStores.storeName","$globalDeviceMgmt.*")
									->where("$globalPartnerDeviceOwnership.resellerID",$resellerID)
									->where("$listOfChains.regAddCity",'like', $city)
									->where("$listOfChains.regAddState",'like', $state)
									->where("$listOfChains.regAddCountry",'like',$country)
									->where("$globalDeviceMgmt.chainID",'like',$chainID)
									->where("$globalDeviceMgmt.storeID",'like',$storeID)
									->where('status','like',$status)
									->get();


								$query  = DB::table('employees as emp')
										    ->leftjoin('attendance_log as al','al.emp_id','emp.device_emp_id')
										    ->join('departments as dep','dep.id','emp.department_id')
										    ->select('emp.*', 'dep.department_name', 'al.auth_date' , DB::raw("MIN(al.auth_time) AS check_in, MAX(al.auth_time) AS check_out"))
										    ->whereIn('al.emp_id', [1,2,3]) // use your array
										    ->groupBy('emp.device_emp_id', 
										    	DB::raw('DATE(al.auth_date_time)')
										    );

										    if($start_date){
										        $query  = $query->where('al.auth_date' , '>=' , $start_date);
										    }
										    if($end_date){
										        $query  = $query->where('al.auth_date' , '<=' , $end_date);
										    }
										  $data = $query->get();




single record show
student::find(2)
student::first()
student::where("id",2)->first();
student::firstWhere("id",2);

student::find(1)->delete();
student::destroy(1);
student::destroy(1,2);


updateOrCreate([update condition],[data])
upsert($data,['uniquekey'],['column name which you want to update'])

same work both method
student::findOrFail(1) not found go to 404 page
student::where("id",1)->firstOrFail();


student::firstOrCreate(
            ["id"=>"1"],
            ["phone"=>9999,"email"=>"vikas@gmail.com"]
        );  
first array condition fetch the first record other it will create new record

Product::where('status', 0)->update(['is_deleted' => 5]);
$products = Product::whereIn('id',[41,58,95,59,52,25,63,98,22,50,76,33,58]);
$products->update(['is_deleted'=> 0]);

$additionalChargesLists = convertToArray(
				DB::table($additionalChargesTable)->where('isActive', 1)
				->select('additionalChargeID','accountID','accountName','name','value','chargeType', 
							DB::raw('CONCAT(name, "-", chargeType) AS uniqueChargeIdentifier'))
				->get());

